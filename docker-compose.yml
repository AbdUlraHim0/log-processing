services:
  web:
    build:
      context: .
      dockerfile: ./packages/web/Dockerfile
      args:
        NEXT_PUBLIC_SUPABASE_URL: ${NEXT_PUBLIC_SUPABASE_URL}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    ports:
      - "3000:3000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - NODE_ENV=production
      - SKIP_REDIS_CONNECTION=false
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/api/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: ./packages/worker/Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - MONITORED_KEYWORDS=${MONITORED_KEYWORDS}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - USE_CLUSTER=${USE_CLUSTER:-false}
      - PROCESS_TIMEOUT_MS=${PROCESS_TIMEOUT_MS:-180000}
      - BATCH_SIZE=${BATCH_SIZE:-1000}
      - MAX_MEMORY_PERCENT=${MAX_MEMORY_PERCENT:-80}
      - NODE_ENV=production
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep 'node' | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped
    # Add Redis health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.1"
          memory: 128M

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
